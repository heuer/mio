/*
 * Gradle build file.
 * 
 * - Download Gradle from <http://www.gradle.org/>
 * - Execute gradle build
 */
version = '0.9.4'

ext.projectName = 'Semagia MIO RDF'
ext.projectDescription = 'Semagia MIO RDF' //TODO

ext.vendorName = 'Semagia'
ext.projectURL = 'http://mio.semagia.com/' //TODO
ext.licenseURL = '' //TODO
ext.vendorURL = '' //TODO
ext.licenseName = '' // TODO


ext.flexSource = 'RealCRTMLexer.flex'
ext.jaySource = 'RealCRTMParser.y'
ext.jayTarget = '/com/semagia/mio/rdf/crtm/RealCRTMParser.java'

apply from: "$rootDir/shared/deserializer.gradle"

ext.sesameLib = 'lib/openrdf-sesame-2.7.13-onejar.jar'
ext.rdfaLib = 'lib/rdfa-0.1.1.jar'
ext.jarjar = 'lib/jarjar-1.4.jar'

ext.libs = [ext.sesameLib, ext.rdfaLib, ext.jarjar]

repositories {
    // jarjar
    maven { url 'http://repo.joist.ws/' }
}

dependencies {
    //buildproject 'com.tonicsystems:jarjar:1.0'

    compile files(libs)
}

compileJava.dependsOn generateParser, generateLexer

private def enhanceClasses(File classesDir) {

    def the_jar = "$buildDir/libs/tmp-mio-rdf-sesame.jar"

    ant {
        taskdef name: 'jarjar', 
            classname: 'com.tonicsystems.jarjar.JarJarTask', 
            classpath: configurations.buildproject.asPath

        jarjar(jarfile: the_jar) {
            fileset dir: classesDir
            zipfileset src: ext.sesameLib, excludes: 'META-INF/**'
            zipfileset src: ext.rdfaLib, excludes: 'META-INF/**'

            rule pattern: "info.aduna.**", result: "com.semagia.mio.rdf.sesame.internal.aduna.@1"
            rule pattern: "org.openrdf.**", result: "com.semagia.mio.rdf.sesame.internal.openrdf.@1"
            rule pattern: "net.rootdev.**", result: "com.semagia.mio.rdf.sesame.internal.rdfa.@1"

            keep pattern: "com.semagia.mio.rdf.**"
        }
    
        unjar src: the_jar, dest: classesDir
    }
    
    def metaInfDir = new File("$classesDir/META-INF/")
    
    metaInfDir.eachDir { File d ->
        if (d.name == 'services') {
            d.eachFile { File f -> if (f.name.startsWith('org.')) { f.delete() } }
        }
        if (d.name != 'services') { d.deleteDir() }
    }

    metaInfDir.eachFile { File f ->
        if ('MANIFEST.MF' == f.name
              || f.name.startsWith('org.')) { f.delete() }
    }
    
    new File("$classesDir/com/semagia/mio/rdf/sesame/internal/openrdf/console").deleteDir()
    new File("$classesDir/com/semagia/mio/rdf/sesame/internal/openrdf/repository").deleteDir()
    new File("$classesDir/com/semagia/mio/rdf/sesame/internal/aduna/app").deleteDir()
    new File("$classesDir/logback.xml").delete()

    new File(the_jar).delete()
}

task includeRDF << {
    enhanceClasses(sourceSets.main.output.classesDir)
}

task enhanceTestClasses << {
    enhanceClasses(sourceSets.test.output.classesDir)
}

jar.dependsOn includeRDF

testClasses.dependsOn enhanceTestClasses

jar {
    manifest {
        instruction 'Bundle-Activator', 'com.semagia.mio.rdf.sesame.internal.osgi.Activator'
        instruction 'Import-Package', '!com.semagia.mio.rdf.*, !com.ibm.icu.*, !org.mozilla.intl.*, *'
    }
}
