/*
 * Common configuration used by all MIO subprojects.
 */
apply plugin: 'java'

apply from: "$rootDir/shared/commons.gradle"
apply from: "$rootDir/shared/jay.gradle"
apply from: "$rootDir/shared/jflex.gradle"

configurations {
    osgi
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

import de.undercouch.gradle.tasks.download.Download

dependencies {
    osgi 'org.osgi:org.osgi.core:4.0.1'
    compile project(':mio-core')
    compile 'com.semagia.mio:mio-core:0.9.6-SNAPSHOT'
    testCompile 'com.semagia.mio:mio-core-tests:0.9.6-SNAPSHOT'
    // While we do not want to expose OSGi as a depedency, we need the lib for Eclipse in the classpath
    testCompile 'org.osgi:org.osgi.core:4.0.1'
}

sourceSets {
    main {
      compileClasspath = sourceSets.main.compileClasspath + configurations.osgi
    }
}

def cxtmZip = new File("$rootDir/shared/cxtm/", 'cxtm.zip')

task downloadCXTMArchive(type: Download) {
    src 'https://github.com/heuer/cxtm/archive/master.zip'
    dest cxtmZip
}

task downloadAndUnzipCXTMTests(dependsOn: downloadCXTMArchive, type: Copy) {
    def unpacked_dir = new File("$rootDir/shared/cxtm/cxtm-master/")
    from zipTree(downloadCXTMArchive.dest)
    into "$rootDir/shared/cxtm/"
    from unpacked_dir
    into "$rootDir/shared/cxtm/"
    unpacked_dir.deleteDir()
}

task copyCXTMTests(type: Copy) {
    from "$rootDir/shared/cxtm/"
    from "$projectDir/test/resources/various/cxtm/"
    into new File(sourceSets.test.output.classesDir, 'cxtm')
}

task ontopiaTests(type: Test, dependsOn: jar) {
    ignoreFailures = true
    //TODO Cannot set readonly property: testResultsDir for class: org.gradle.api.plugins.JavaPluginConvention
    //project.testResultsDir = new File(project.testResultsDir, 'ontopia')
    //project.testReportDir = new File(project.testReportDir, 'ontopia')
    classpath = test.classpath
    testClassesDir = sourceSets.test.output.classesDir
    systemProperties['org.tmapi.core.TopicMapSystemFactory'] = 'net.ontopia.topicmaps.impl.tmapi2.TopicMapSystemFactory'
}

build.dependsOn ontopiaTests

if (!cxtmZip.exists()) {
    copyCXTMTests.dependsOn(downloadAndUnzipCXTMTests)
}

processTestResources.dependsOn copyCXTMTests

try {
    if (project.ext.jaySource != '') {
        dependencies {
            buildproject 'jay:jay:1.1.1@jar'
        }
        sourceSets { main {  java { srcDir 'src/grammar' } } }
    }
} catch(ex) {}

try {
    if (project.ext.flexSource != '') {
        dependencies {
            buildproject 'de.jflex:jflex:1.6.0'
        }
        sourceSets { main {  java { srcDir 'src/grammar' } } }
    }
} catch(ex) {}
